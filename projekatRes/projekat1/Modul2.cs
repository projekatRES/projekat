///////////////////////////////////////////////////////////
//  Modul2.cs
//  Implementation of the Class Modul2
//  Generated by Enterprise Architect
//  Created on:      22-May-2018 5:42:52 PM
//  Original author: Saska
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using projekat1;
using System.Xml.Serialization;
using projekat;

public class Modul2 : IModul2 {

	public CollectionDescription m_CollectionDescription;
    public Code help;
    public List<CollectionDescription> cd1 = new List<CollectionDescription>();
    public List<CollectionDescription> cd2 = new List<CollectionDescription>();
    public List<CollectionDescription> cd3 = new List<CollectionDescription>();
    public List<CollectionDescription> cd4 = new List<CollectionDescription>();

    public Dictionary<Code, int> pairs = new Dictionary<Code, int>();

    public Modul2(){

    }

    // prima podatke od Modula1 ili direktno od Inputa
    // skladisti podatke u xml fajl
    // po vrsti dataset-a(kojih ima 4 vrste-1,2,3,4) ima i razlicite baze(4 xml fajla)
    // podaci su skladisteni u formi CollectionDescription-a
   

    public bool ReceiveFromModul1(ListDescription listdescription)
    {
        if (listdescription == null)
        {
            throw new ArgumentNullException("listdescription");
        }

        foreach (Description d in listdescription.m_Description)
        {
            m_CollectionDescription = new CollectionDescription();
            m_CollectionDescription.Id = d.Id;
            m_CollectionDescription.timeStamp = DateTime.Now;

            foreach (Modul1Property dp in d._m1Property)
            {
                Modul2Property hp = new Modul2Property();

                hp.Code = dp.Code;
                help = dp.Code;
                hp.Modul2Value = dp.Value;

                m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0] = hp;

            }
            m_CollectionDescription.Dataset = d.Dataset;


            if (ValidationCheck(m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0].Code, m_CollectionDescription.Dataset))
            {
                Logger.Log("\nReceiveFromModul1 u Modulu2 prepakovalo je posatke u ColectionDescription.\n");
                Logger.Log("CD : " + m_CollectionDescription + "\n");
                Serialize(m_CollectionDescription);
            }
            else
            {
                Logger.Log("Validacija Dataset-a u Modulu2 nije prosla.\n");
                return false;
            }


        }
        return true;
    }

    public bool ValidationCheck(Code code, int value)
    {
        pairs = new Dictionary<Code, int>();
        pairs.Add(Code.CODE_ANALOG, 1);
        pairs.Add(Code.CODE_DIGITAL, 1);
        pairs.Add(Code.CODE_CUSTOM, 2);
        pairs.Add(Code.CODE_LIMITSET, 2);
        pairs.Add(Code.CODE_SINGLENODE, 3);
        pairs.Add(Code.CODE_MULTIPLENODE, 3);
        pairs.Add(Code.CODE_CONSUMER, 4);
        pairs.Add(Code.CODE_SOURCE, 4);

        //provera da li su vrednostri saglasne
        foreach (KeyValuePair<Code, int> k in pairs)
        {
            if (k.Key == code)
            {
                if (k.Value == value)
                {
                    return true;
                }
            }
        }
        return false;
    }

    //skladisti objekat CD ako je validan Deadband
    public bool Serialize(CollectionDescription cd)
    {
        if (cd != null)
        {
            if (CheckDeadband(cd))
            {
                cd.timeStamp = DateTime.Now;
                if (SerializeList(cd))
                {
                    Logger.Log("\n\nCollectionDescription u Modulu2 je serijalizovan.\n");
                    return true;
                }

                return false;

            }
            else
            {
                Logger.Log("\n\nCollectionDescription u Modulu2 nije serijalizovan.\n Njegova vrednost nije 2% veca od njegove stare vrednosti.\n");
                return false;
            }
        }
        else
        {
            throw new ArgumentNullException("cd");
        }
    }

    public bool CheckDeadband(CollectionDescription primljeniPodaci)
    {

        List<CollectionDescription> procitaniPodaci = null;
        if (primljeniPodaci == null)
        {
            throw new ArgumentNullException("cd");
        }
        if (primljeniPodaci.m_HistoricalCollection.m_Modul2Property[0].Code.Equals(Code.CODE_DIGITAL))
        {
            return true;
        }
        procitaniPodaci = DeserializeList(primljeniPodaci.Dataset);

        if (procitaniPodaci.Count == 0)
            return true;

        foreach (CollectionDescription item in procitaniPodaci)
        {
            if (item.m_HistoricalCollection.m_Modul2Property[0].Code == primljeniPodaci.m_HistoricalCollection.m_Modul2Property[0].Code)
            {
                if ((primljeniPodaci.m_HistoricalCollection.m_Modul2Property[0].Modul2Value < (item.m_HistoricalCollection.m_Modul2Property[0].Modul2Value * 1.02)) && ((primljeniPodaci.m_HistoricalCollection.m_Modul2Property[0].Modul2Value > (item.m_HistoricalCollection.m_Modul2Property[0].Modul2Value * 0.98))))
                {
                    return false;
                }
                
            }
        }
        return true;
    }

    public List<CollectionDescription> ReadDataForReader(Code code)
    {
        List<CollectionDescription> pomocnaLista = new List<CollectionDescription>();
        List<CollectionDescription> pomocnaLista2 = new List<CollectionDescription>();

        if ((code == Code.CODE_ANALOG) || (code == Code.CODE_DIGITAL))
        {
            pomocnaLista = DeserializeList(1);
        }
        else if ((code == Code.CODE_CUSTOM) || (code == Code.CODE_LIMITSET))
        {
            pomocnaLista = DeserializeList(2);
        }
        else if ((code == Code.CODE_SINGLENODE) || (code == Code.CODE_MULTIPLENODE))
        {
            pomocnaLista = DeserializeList(3);
        }
        else
        {
            pomocnaLista = DeserializeList(4);
        }

        if (pomocnaLista.Count > 0)
        {
            foreach (CollectionDescription item in pomocnaLista)
            {
                if (item.m_HistoricalCollection.m_Modul2Property[0].Code.Equals(code))
                {
                    pomocnaLista2.Add(item);
                }
            }
        }
        return pomocnaLista2;
    }

    public List<CollectionDescription> DeserializeList(int dataSet)
    {
        List<CollectionDescription> pomocnaLista = new List<CollectionDescription>();
        switch(dataSet)
        {
            case 1:
                if (!File.Exists("CollectionDescription1.xml"))
                    File.Create("CollectionDescription1.xml").Dispose();
                pomocnaLista = DataBase.serializer.DeSerializeObject<List<CollectionDescription>>("CollectionDescription1.xml");
                break;
            case 2:
                if (!File.Exists("CollectionDescription2.xml"))
                    File.Create("CollectionDescription2.xml").Dispose();
                pomocnaLista = DataBase.serializer.DeSerializeObject<List<CollectionDescription>>("CollectionDescription2.xml");
                break;

            case 3:
                if (!File.Exists("CollectionDescription3.xml"))
                    File.Create("CollectionDescription3.xml").Dispose();
                pomocnaLista = DataBase.serializer.DeSerializeObject<List<CollectionDescription>>("CollectionDescription3.xml");
                break;
            case 4:
                if (!File.Exists("CollectionDescription4.xml"))
                    File.Create("CollectionDescription4.xml").Dispose();
                pomocnaLista = DataBase.serializer.DeSerializeObject<List<CollectionDescription>>("CollectionDescription4.xml");
                break;

        }
        if (pomocnaLista == null)
        {
            pomocnaLista = new List<CollectionDescription>();
        }
        return pomocnaLista;
    }

    public bool SerializeList(CollectionDescription cd)
    {
        if (cd == null)
        {
            throw new ArgumentNullException("cd");
        }
        switch(cd.Dataset)
        {
            case 1:
                cd1 = DeserializeList(1);
                cd1.Add(cd);
                DataBase.serializer.SerializeObject<List<CollectionDescription>>(cd1, "CollectionDescription1.xml");
                return true;
            case 2:
                cd2 = DeserializeList(2);
                cd2.Add(cd);
                DataBase.serializer.SerializeObject<List<CollectionDescription>>(cd2, "CollectionDescription2.xml");
                return true;
            case 3:
                cd3 = DeserializeList(3);
                cd3.Add(cd);
                DataBase.serializer.SerializeObject<List<CollectionDescription>>(cd3, "CollectionDescription3.xml");
                return true;
            case 4:
                cd4 = DeserializeList(4);
                cd4.Add(cd);
                DataBase.serializer.SerializeObject<List<CollectionDescription>>(cd4, "CollectionDescription4.xml");
                return true;
            default:
                throw new ArgumentException("Dataset nije validan.");
        }

    }


    public bool ReceiveFromInput(Code code, int value)
    {
            Modul2Property hp = new Modul2Property();
            m_CollectionDescription = new CollectionDescription();
            m_CollectionDescription.Id = (int)((DateTime.Now.Ticks / 10) % 1000000000);


            hp.Code = code;
            hp.Modul2Value = value;

            m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0] = hp;

            Codes codes = new Codes();
            m_CollectionDescription.Dataset = codes.GetDataset(code);

            if (ValidationCheck(m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0].Code, m_CollectionDescription.Dataset))
            {
                Logger.Log("ReceiveFromInput u Modulu2 je konvertovala primljene podatke u CollectionDescription");
                Logger.Log("CD : " + m_CollectionDescription + "\n");
                Serialize(m_CollectionDescription);
            }
            else
            {
                Logger.Log("Validacija Dataset-a u Modulu2 nije prosla.\n");
                return false;
            }
            return true;
        }
    
}//end Modul2