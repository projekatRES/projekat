///////////////////////////////////////////////////////////
//  Modul2.cs
//  Implementation of the Class Modul2
//  Generated by Enterprise Architect
//  Created on:      22-May-2018 5:42:52 PM
//  Original author: Saska
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using projekat1;
using System.Xml.Serialization;
using projekat;

public class Modul2 : IModul2 {
    Modul2Helper helper = new Modul2Helper();

	public CollectionDescription m_CollectionDescription;
    public Code help;

    public Modul2(){

    }

    // prima podatke od Modula1 ili direktno od Inputa
    // skladisti podatke u xml fajl
    // po vrsti dataset-a(kojih ima 4 vrste-1,2,3,4) ima i razlicite baze(4 xml fajla)
    // podaci su skladisteni u formi CollectionDescription-a
   

    public bool ReceiveFromModul1(ListDescription listdescription)
    {
        if (listdescription == null)
        {
            throw new ArgumentNullException("listdescription");
        }

        foreach (Description d in listdescription.m_Description)
        {
            m_CollectionDescription = new CollectionDescription();
            m_CollectionDescription.Id = d.Id;
            m_CollectionDescription.timeStamp = DateTime.Now;

            foreach (Modul1Property dp in d._m1Property)
            {
                Modul2Property hp = new Modul2Property();

                hp.Code = dp.Code;
                help = dp.Code;
                hp.Modul2Value = dp.Value;

                m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0] = hp;

            }
            m_CollectionDescription.Dataset = d.Dataset;


            if (helper.ValidationCheck(m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0].Code, m_CollectionDescription.Dataset))
            {
                Logger.Log("\nReceiveFromModul1 u Modulu2 prepakovalo je posatke u ColectionDescription.\n");
                Logger.Log("CD : " + m_CollectionDescription + "\n");
                helper.Serialize(m_CollectionDescription);
            }
            else
            {
                Logger.Log("Validacija Dataset-a u Modulu2 nije prosla.\n");
                return false;
            }


        }
        return true;
    }

   

    public List<CollectionDescription> ReadDataForReader(Code code)
    {
        List<CollectionDescription> pomocnaLista = new List<CollectionDescription>();
        List<CollectionDescription> pomocnaLista2 = new List<CollectionDescription>();
        switch(code)
        {
            case Code.CODE_ANALOG:
                pomocnaLista = helper.DeserializeList(1);
                break;
            case Code.CODE_DIGITAL:
                pomocnaLista = helper.DeserializeList(1);
                break;
            case Code.CODE_LIMITSET:
                pomocnaLista = helper.DeserializeList(2);
                break;
            case Code.CODE_CUSTOM:
                pomocnaLista = helper.DeserializeList(2);
                break;
            case Code.CODE_MULTIPLENODE:
                pomocnaLista = helper.DeserializeList(3);
                break;
            case Code.CODE_SINGLENODE:
                pomocnaLista = helper.DeserializeList(3);
                break;
            case Code.CODE_CONSUMER:
                pomocnaLista = helper.DeserializeList(4);
                break;
            case Code.CODE_SOURCE:
                pomocnaLista = helper.DeserializeList(4);
                break;
        }

        if (pomocnaLista.Count > 0)
        {
            foreach (CollectionDescription item in pomocnaLista)
            {
                if (item.m_HistoricalCollection.m_Modul2Property[0].Code.Equals(code))
                {
                    pomocnaLista2.Add(item);
                }
            }
        }
        return pomocnaLista2;
    }

    public bool ReceiveFromInput(Code code, int value)
    {
            Modul2Property hp = new Modul2Property();
            m_CollectionDescription = new CollectionDescription();
            m_CollectionDescription.Id = (int)((DateTime.Now.Ticks / 10) % 1000000000);


            hp.Code = code;
            hp.Modul2Value = value;

            m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0] = hp;

            Codes codes = new Codes();
            m_CollectionDescription.Dataset = codes.GetDataset(code);

            if (helper.ValidationCheck(m_CollectionDescription.m_HistoricalCollection.m_Modul2Property[0].Code, m_CollectionDescription.Dataset))
            {
                Logger.Log("Metoda ReceiveFromInput u Modulu2 je konvertovala primljene podatke u CollectionDescription");
                Logger.Log("CD : " + m_CollectionDescription + "\n");
                helper.Serialize(m_CollectionDescription);
            }
            else
            {
                Logger.Log("Validacija Dataset-a u Modulu2 nije prosla.\n");
                return false;
            }
            return true;
        }
    
}//end Modul2